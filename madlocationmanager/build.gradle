plugins {
    id 'com.android.library'
    id 'com.github.dcendents.android-maven'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.5"
}

group='com.github.maddevsio'

ext {
    // if CI does not set RELEASE_VERSION use hardcoded one
    releaseVersion = System.getenv('RELEASE_VERSION') ?: '0.1.14'
}

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api 'androidx.appcompat:appcompat:1.2.0'
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'com.google.android.material:material:1.2.1'
    api 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "com.google.android.gms:play-services-location:17.1.0"
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task androidJavadocs(type: Javadoc, dependsOn: build) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

project.afterEvaluate {
    publishing {
        publications {
            mavenPublication(MavenPublication) {
                groupId = 'com.maddevsio.mad-location-manager'
                artifactId = 'mad-location-manager'
                version = releaseVersion

                from components.release
                artifact sourceJar
                artifact javadocJar

                pom {
                    packaging 'aar'
                    name = 'Mad Location Manager'
                    description = 'This is library for GPS and Accelerometer data "fusion" with Kalman filter'
                    url = 'https://github.com/maddevsio/mad-location-manager'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'Lezh1k'
                            name = 'Oleg Katkov'
                            email = 'lezh1k.vohrer@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/maddevsio/mad-location-manager.git'
                        developerConnection = 'scm:git:ssh://github.com/maddevsio/mad-location-manager.git'
                        url = 'https://github.com/maddevsio/mad-location-manager'
                    }
                }
            }
        }
    }
}

bintray {
    dryRun = false
    publish = true
    override = true
    user = System.getenv('BINTRAY_USER') ?: (project.hasProperty('bintrayUser') ? project.property('bintrayUser') : '')
    key = System.getenv('BINTRAY_KEY') ?: (project.hasProperty('bintrayKey') ? project.property('bintrayKey') : '')
    publications = ['mavenPublication']

    pkg {
        repo = 'maven'
        name = 'mad-location-manager'
        userOrg = 'Lezh1k'
        description = 'This is library for GPS and Accelerometer data "fusion" with Kalman filter'
        publications = ['mavenPublication']
        licenses = ['MIT']
        vcsUrl = 'https://github.com/maddevsio/mad-location-manager.git'
        websiteUrl = 'https://github.com/maddevsio/mad-location-manager.git'
        issueTrackerUrl = 'https://github.com/maddevsio/mad-location-manager/issues'
        githubRepo = 'maddevsio/mad-location-manager'
        githubReleaseNotesFile = 'README.md'
        version {
            name = releaseVersion
            desc = 'Mad Location Manager v' + releaseVersion
            released = new Date()
            vcsTag = releaseVersion
        }
    }
}

